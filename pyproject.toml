[build-system]
requires = ["setuptools>=77"]
build-backend = "setuptools.build_meta"

[project]
name = "nixinstall"
version = "3.0.8"
description = "NixOS installer - guided only, fork of archinstall"
authors = [
    {name = "Anton Hvornum", email = "anton@hvornum.se"},
    {name = "Tom van Dijk", email = "18gatenmaker6@gmail.com"},
]
license = "GPL-3.0-only"
readme = "README.md"
requires-python = ">=3.12"
keywords = ["linux", "nixos", "installer"]
classifiers = [
    "Programming Language :: Python :: 3.12",
    "Operating System :: POSIX :: Linux",
]
dependencies = [
    "pyparted>=3.13.0",
    "pydantic>=2.11.4",
    "cryptography>=44.0.2",
]

[project.urls]
Home = "https://nixos.org"
Source = "https://github.com/dtomvan/nixinstall"

[project.optional-dependencies]
log = ["systemd_python==235"]
dev = [
    "mypy==1.16.1",
    "ruff==0.12.2",
    "pytest==8.4.1",
]
doc = ["sphinx"]

[project.scripts]
nixinstall = "nixinstall:run_as_a_module"

[tool.setuptools.dynamic]
readme = {file = ["README.rst", "USAGE.rst"]}

[tool.setuptools]
include-package-data = true

[tool.setuptools.package-data]
# We could specify locales/languages.json etc instead, but catchall works too.
"nixinstall" = [
    "**/*.py",
    "**/*.mo",
    "**/*.po",
    "**/*.pot",
    "**/*.json",
]

[tool.setuptools.package-dir]
nixinstall = "nixinstall"

[tool.mypy]
python_version = "3.12"
files = "."
exclude = "^build/"
disallow_any_explicit = false
disallow_any_expr = false
disallow_any_unimported = true
enable_error_code = [
    "deprecated",
    "explicit-override",
    "ignore-without-code",
    "mutable-override",
    "possibly-undefined",
    "redundant-expr",
    "redundant-self",
    "truthy-bool",
    "truthy-iterable",
    "unimported-reveal",
    "unused-awaitable",
]
show_traceback = true
strict = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = "nixinstall.default_profiles.*"
disallow_any_explicit = true

[[tool.mypy.overrides]]
module = "nixinstall.examples.*"
disallow_any_explicit = true

[[tool.mypy.overrides]]
module = "nixinstall.lib.*"
warn_return_any = false

[[tool.mypy.overrides]]
module = "nixinstall.lib.disk.*"
# 'Any' imports are allowed because pyparted doesn't have type hints
disallow_any_unimported = false

[[tool.mypy.overrides]]
module = "nixinstall.lib.models.*"
# 'Any' imports are allowed because pyparted doesn't have type hints
disallow_any_unimported = false

[[tool.mypy.overrides]]
module = "nixinstall.lib.packages"
disallow_any_explicit = true

[[tool.mypy.overrides]]
module = "nixinstall.lib.utils"
disallow_any_explicit = true

[[tool.mypy.overrides]]
module = [
    "parted",
]
ignore_missing_imports = true

[tool.bandit]
targets = ["nixinstall"]
exclude = ["/tests"]

[tool.pytest.ini_options]
pythonpath = ["."]
addopts = "-s"
testpaths = ["tests"]

[tool.ruff]
target-version = "py312"
line-length = 160

[tool.ruff.format]
indent-style = "tab"
quote-style = "single"
docstring-code-format = true

[tool.ruff.lint]
select = [
    "C90",    # mccabe
    "E",      # pycodestyle errors
    "F",      # Pyflakes
    "FLY",    # flynt
    "I",      # isort
    "PGH",    # pygrep-hooks
    "RUF",    # Ruff-specific rules
    "UP",     # pyupgrade
    "W",      # pycodestyle warnings
]

ignore = [
    "B006",     # mutable-argument-default
    "B008",     # function-call-in-default-argument
    "B904",     # raise-without-from-inside-except
    "B905",     # zip-without-explicit-strict
    "B909",     # loop-iterator-mutation
    "COM812",   # missing-trailing-comma
    "PLC0415",  # import-outside-top-level
    "PLC1901",  # compare-to-empty-string
    "PLW1514",  # unspecified-encoding
    "PLW1641",  # eq-without-hash
    "PLW2901",  # redefined-loop-name
    "RUF005",   # collection-literal-concatenation
    "RUF015",   # unnecessary-iterable-allocation-for-first-element
    "RUF039",   # unraw-re-pattern
    "RUF051",   # if-key-in-dict-del
    "UP037",    # quoted-annotation
    "W191",     # tab-indentation
]

[tool.ruff.lint.mccabe]
max-complexity = 40
